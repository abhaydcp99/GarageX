// <auto-generated />
using System;
using CarServiceBooking.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarServiceBooking.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250701063941_FixUserTableName")]
    partial class FixUserTableName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarServiceBooking.API.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BookingTime")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("SpecialInstructions")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProviderId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("CarServiceBooking.API.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ProviderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Maintenance",
                            CreatedAt = new DateTime(2025, 7, 1, 6, 39, 40, 393, DateTimeKind.Utc).AddTicks(5743),
                            Description = "Complete oil change with high-quality motor oil and filter replacement",
                            Duration = 30,
                            ImageUrl = "https://images.pexels.com/photos/4489702/pexels-photo-4489702.jpeg",
                            IsActive = true,
                            Name = "Oil Change Service",
                            Price = 49.99m,
                            ProviderId = 2
                        },
                        new
                        {
                            Id = 2,
                            Category = "Safety",
                            CreatedAt = new DateTime(2025, 7, 1, 6, 39, 40, 393, DateTimeKind.Utc).AddTicks(5752),
                            Description = "Comprehensive brake system inspection and repair services",
                            Duration = 90,
                            ImageUrl = "https://images.pexels.com/photos/4489743/pexels-photo-4489743.jpeg",
                            IsActive = true,
                            Name = "Brake Inspection & Repair",
                            Price = 149.99m,
                            ProviderId = 2
                        },
                        new
                        {
                            Id = 3,
                            Category = "Cleaning",
                            CreatedAt = new DateTime(2025, 7, 1, 6, 39, 40, 393, DateTimeKind.Utc).AddTicks(5757),
                            Description = "Premium car wash with interior and exterior detailing",
                            Duration = 120,
                            ImageUrl = "https://images.pexels.com/photos/97075/pexels-photo-97075.jpeg",
                            IsActive = true,
                            Name = "Car Wash & Detailing",
                            Price = 89.99m,
                            ProviderId = 2
                        },
                        new
                        {
                            Id = 4,
                            Category = "Maintenance",
                            CreatedAt = new DateTime(2025, 7, 1, 6, 39, 40, 393, DateTimeKind.Utc).AddTicks(5795),
                            Description = "Professional tire rotation and wheel balancing service",
                            Duration = 45,
                            ImageUrl = "https://images.pexels.com/photos/13065690/pexels-photo-13065690.jpeg",
                            IsActive = true,
                            Name = "Tire Rotation & Balance",
                            Price = 79.99m,
                            ProviderId = 2
                        });
                });

            modelBuilder.Entity("CarServiceBooking.API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 7, 1, 6, 39, 39, 570, DateTimeKind.Utc).AddTicks(8864),
                            Email = "admin@carservice.com",
                            Name = "Admin User",
                            PasswordHash = "$2a$11$t0s3JFGVX2w/YxZBMp4t1.UEVd08UMein.o2BRvydyVLAMnoXokEm",
                            Phone = "+1234567890",
                            Role = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 7, 1, 6, 39, 39, 984, DateTimeKind.Utc).AddTicks(7165),
                            Email = "provider@carservice.com",
                            Name = "Service Provider",
                            PasswordHash = "$2a$11$Twaord..w18fue5U.VPtqO8BgA7l4gWi3ctdBPFVxq9IizxfDOH82",
                            Phone = "+1234567891",
                            Role = "provider"
                        },
                        new
                        {
                            Id = 3,
                            Address = "123 Main St, City, State",
                            CreatedAt = new DateTime(2025, 7, 1, 6, 39, 40, 393, DateTimeKind.Utc).AddTicks(4011),
                            Email = "customer@carservice.com",
                            Name = "John Customer",
                            PasswordHash = "$2a$11$/LfamEiR39V/oqyQZGbCmeW04vwlJ791PnSKQJzIIRYn8uUiq6Yhq",
                            Phone = "+1234567892",
                            Role = "customer"
                        });
                });

            modelBuilder.Entity("CarServiceBooking.API.Models.Booking", b =>
                {
                    b.HasOne("CarServiceBooking.API.Models.User", "Customer")
                        .WithMany("CustomerBookings")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarServiceBooking.API.Models.User", "Provider")
                        .WithMany("ProviderBookings")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CarServiceBooking.API.Models.Service", "Service")
                        .WithMany("Bookings")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Provider");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("CarServiceBooking.API.Models.Service", b =>
                {
                    b.HasOne("CarServiceBooking.API.Models.User", "Provider")
                        .WithMany("Services")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("CarServiceBooking.API.Models.Service", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("CarServiceBooking.API.Models.User", b =>
                {
                    b.Navigation("CustomerBookings");

                    b.Navigation("ProviderBookings");

                    b.Navigation("Services");
                });
#pragma warning restore 612, 618
        }
    }
}
